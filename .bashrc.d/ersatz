#!/bin/bash

readonly ERSATZ_GO_IMAGE_NAME="golang-ersatz:1.0.0"
readonly ERSATZ_RUST_IMAGE_NAME="rust-ersatz:1.0.0"
readonly ERSATZ_PROXY="http://proxy.inf.bndes.net:8080"
readonly ERSATZ_NO_PROXY="bndes.net,*.bndes.net,10.,10.*,10.0.0.0/8,10.0.0.0/255.0.0.0"
readonly CARGO_CACHE_VOLUME="ersatz_cache_volume"
readonly ERSATZ_GO_DOCKERFILE=$(cat <<'EOF'
FROM golang:1.25.1
ARG UID=1000
ARG GID=1000
RUN echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    just \
    curl \
    git \
    ca-certificates \
    goreleaser && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN groupadd -g $GID -o user
RUN useradd -m -u $UID -g $GID -o -s /bin/bash user
USER user
WORKDIR /app
EOF
)

readonly ERSATZ_RUST_DOCKERFILE=$(cat <<'EOF'
FROM rust:1.81.0
ARG UID=1000
ARG GID=1000
ENV CARGO_HOME=/usr/local/cargo
ENV RUSTUP_HOME=/usr/local/rustup
ENV PATH=/usr/local/cargo/bin:$PATH
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libssl-dev \
    curl \
    git \
    ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
RUN cargo install cross cargo-edit cargo-audit cargo-release cargo-tarpaulin
RUN groupadd -g $GID -o user
RUN useradd -m -u $UID -g $GID -o -s /bin/bash user
USER user
WORKDIR /app
EOF
)
# Verifica se a imagem já existe localmente
inspect() {

docker image inspect "$1" &>/dev/null || {
  echo "Imagem '$1' não encontrada. Construindo agora..."
  docker build \
    --build-arg UID=$(id -u) \
    --build-arg GID=$(id -g) \
    --build-arg http_proxy="ERSATZ_PROXY"  \
    --build-arg https_proxy="ERSATZ_PROXY" \
    --build-arg no_proxy="ERSATZ_NO_PROXY" \
    -t "$1" - <<< "$2"
}
}

gorun() {
inspect "${ERSATZ_GO_IMAGE_NAME}" "${ERSATZ_GO_DOCKERFILE}"
docker run --rm -it \
  -v "${PWD}:/app" \
  -v "${HOME}/.gitconfig:/home/user/.gitconfig:ro" \
  -e http_proxy="ERSATZ_PROXY" \
  -e https_proxy="ERSATZ_PROXY" \
  -e no_proxy="ERSATZ_NO_PROXY" \
  -e GOPROXY \
  -e GITLAB_TOKEN \
  -e GOCACHE=/app/bin/.cache \
  "${ERSATZ_GO_IMAGE_NAME}" "$@"
}

rustrun() {
inspect "${ERSATZ_RUST_IMAGE_NAME}" "${ERSATZ_RUST_DOCKERFILE}"
docker volume create ${CARGO_CACHE_VOLUME} >/dev/null
# O volume CARGO_CACHE_VOLUME é para permitir algum cache de downloads.
docker run --rm -it \
  -v "${PWD}:/app" \
  -v "${CARGO_CACHE_VOLUME}:/usr/local/cargo/registry" \
  -v "${HOME}/.gitconfig:/home/user/.gitconfig:ro" \
  -e http_proxy="ERSATZ_PROXY" \
  -e https_proxy="ERSATZ_PROXY" \
  -e no_proxy="ERSATZ_NO_PROXY" \
  -e GITLAB_TOKEN \
  -e RUST_BACKTRACE=1 \
  "${ERSATZ_RUST_IMAGE_NAME}" "$@"
}

usage() {
  echo "Uso: ersatz <comando> [argumentos...]"
  echo "   ou: ersatz [-i|--image <comando>] [argumentos...]"
  echo ""
  echo "Comandos disponíveis:"
  echo "  go"
  echo "  goreleaser"
  echo "  cargo"
  echo "  just (use '-i')"
  echo "Imagens disponíveis:"
  echo "  go"
  echo "  rust"
  echo "Para excluir imagens:"
  echo "  ersatz [-r|--remove <imagem>]"
  exit 1
}

ersatz() {
  if [ $# -eq 0 ]; then
    usage
  fi

  local target_func

  case "$1" in
    -i|--image)
      if [ -z "$2" ]; then
        echo "Erro: A opção '$1' requer um nome de comando como argumento." >&2
        usage
      fi
      target="$2"
      shift 2
      ;;

    -r|--remove)
      if [ -z "$2" ]; then
        echo "Erro: A opção '$1' requer um nome de imagem como argumento." >&2
        usage
      fi
      remove "$2"
      shift 2
      ;;

    *)
      target="$1"
      ;;
  esac

  case "$target" in
    go | goreleaser)
      gorun "$@"
      ;;
    cargo | rustup)
      rustrun "$@"
      ;;
    *)
      echo "Erro: Comando desconhecido '$target'." >&2
      return 1
      ;;
  esac
}

remove() {
  case "$1" in
    go)
    docker rmi "${ERSATZ_GO_IMAGE_NAME}"
      ;;
    just)
    docker rmi "${ERSATZ_RUST_IMAGE_NAME}"
      ;;
    *)
      echo "Erro: Imagem desconhecida '$1'." >&2
      return 1
      ;;
  esac
}

