#!/bin/bash

readonly GO_IMAGE_NAME="golang-ersatz:1.0.0"
readonly PROXY="http://proxy.inf.bndes.net:8080"
readonly NO_PROXY="bndes.net,*.bndes.net,10.,10.*,10.0.0.0/8,10.0.0.0/255.0.0.0"

readonly GO_DOCKERFILE=$(cat <<'EOF'
FROM golang:1.25.1
ARG UID=1000
ARG GID=1000
RUN echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    just \
    ca-certificates \
    goreleaser && \
    # Limpeza para reduzir o tamanho da imagem
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN groupadd -g $GID -o user
RUN useradd -m -u $UID -g $GID -o -s /bin/bash user
USER user
WORKDIR /app
EOF
)

# Verifica se a imagem já existe localmente
inspect() {
docker image inspect "$1" &>/dev/null || {
  echo "Imagem '$1' não encontrada. Construindo agora..."
  docker build \
    --build-arg UID=$(id -u) \
    --build-arg GID=$(id -g) \
    --build-arg http_proxy="$PROXY"  \
    --build-arg https_proxy="$PROXY" \
    --build-arg no_proxy="$NO_PROXY" \
    -t "$1" - <<< "$GO_DOCKERFILE"
}
}

gorun() {
inspect "${GO_IMAGE_NAME}"
# Executa o contêiner Docker com as configurações corretas
docker run --rm -it \
  -v "${PWD}:/app" \
  -e http_proxy="$PROXY" \
  -e https_proxy="$PROXY" \
  -e no_proxy="$NO_PROXY" \
  -e GOPROXY \
  -e GITLAB_TOKEN \
  -e GOCACHE=/app/bin/.cache \
  "${GO_IMAGE_NAME}" "$@"
}

usage() {
  echo "Uso: ersatz <comando> [argumentos...]"
  echo "   ou: ersatz [-i|--image <comando>] [argumentos...]"
  echo ""
  echo "Comandos disponíveis:"
  echo "  go"
  echo "  goreleaser"
  echo "  just (use '-i')"
  echo "Imagens disponíveis:"
  echo "  go"
  echo "Para excluir imagens:"
  echo "  ersatz [-r|--remove <imagem>]"
  exit 1
}

ersatz() {
  if [ $# -eq 0 ]; then
    usage
  fi

  local target_func

  case "$1" in
    -i|--image)
      if [ -z "$2" ]; then
        echo "Erro: A opção '$1' requer um nome de comando como argumento." >&2
        usage
      fi
      target="$2"
      shift 2
      ;;

    -r|--remove)
      if [ -z "$2" ]; then
        echo "Erro: A opção '$1' requer um nome de imagem como argumento." >&2
        usage
      fi
      remove "$2"
      shift 2
      ;;

    *)
      target="$1"
      ;;
  esac

  case "$target" in
    go | goreleaser)
      gorun "$@"
      ;;
    *)
      echo "Erro: Comando desconhecido '$target'." >&2
      return 1
      ;;
  esac
}

remove() {
  case "$1" in
    go)
    docker rmi "${GO_IMAGE_NAME}"
      ;;
    *)
      echo "Erro: Imagem desconhecida '$1'." >&2
      return 1
      ;;
  esac
}

