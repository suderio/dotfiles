#+TITLE: Shell Config
#+AUTHOR: Paulo Suderio


* Configuração

Repositório [dotfiles](http://github.com/suderio/dotfiles.git)

* Configurações de Shell

** Table of Contents :toc:
- [[#configuração][Configuração]]
- [[#configurações-de-shell][Configurações de Shell]]
  - [[#bashrc][bashrc]]
- [[#aliases][Aliases]]
  - [[#basic][Basic]]
  - [[#todo][TODO]]

** bashrc
*** Configurações Básicas
Não está rodando interativamente, não faz nada.
#+begin_src shell :tangle ~/.bashrc :shebang "#!/bin/bash"
[[ $- != *i* ]] && return
#+end_src

Prompt básico, podemos melhorar depois.
#+begin_src shell :tangle ~/.bashrc
PS1='[\u@\h \W]\$ '
##
##
##
#+end_src

History
#+begin_src shell :tangle ~/.bashrc
HISTCONTROL=ignoreboth
export HISTIGNORE="&:ls:[bf]g:exit"
export HISTFILESIZE=20000
export HISTSIZE=10000
# Combine multiline commands into one in history
shopt -s cmdhist
# append to the history file, don't overwrite it
shopt -s histappend
#+end_src

Verifica o tamanho da janela e se necessário atualiza LINES e COLUMNS.
#+begin_src shell :tangle ~/.bashrc
shopt -s checkwinsize
#+end_src

O "**" em um path equivale a todos os arquivos e zero ou mais diretórios e subdiretórios.
#+begin_src shell :tangle ~/.bashrc
if shopt -q globstar 2>/dev/null; then
  shopt -s globstar
fi
#+end_src

Less mais amigável para arquivo binários, ver lesspipe(1)
#+begin_src shell :tangle ~/.bashrc
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
#+end_src

Para identificar o chroot em que se está
#+begin_src shell :tangle ~/.bashrc
if [ -z "${chroot_ps1:-}" ] && [ -r /etc/chroot_ps1 ]; then
    chroot_ps1=$(cat /etc/chroot_ps1)
fi
#+end_src

*** Color
set a fancy prompt (non-color, unless we know we "want" color)
#+begin_src shell :tangle ~/.bashrc
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac
#+end_src

colored prompt
#+begin_src shell :tangle ~/.bashrc
force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${chroot_ps1:+($chroot_ps1)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${chroot_ps1:+($chroot_ps1)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt
#+end_src

Less
#+begin_src shell :tangle ~/.bashrc
export LESS=-R
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
#+end_src

enable color support of ls and also add handy aliases
#+begin_src shell :tangle ~/.bashrc
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
#+end_src

colored GCC warnings and errors
#+begin_src shell :tangle ~/.bashrc
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
#+end_src

*** Completion

Enable programmable completion features (you don't need to enable
this, if it's already enabled in /etc/bash.bashrc and /etc/profile
sources /etc/bash.bashrc).
#+begin_src shell :tangle ~/.bashrc
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#+end_src

*** Bugs
Isso é para resolver o bug de acentos no alacritty em wayland
TODO Adicionar condição para pt_BR.UTF-8 estar instalado
#+begin_src shell :tangle ~/.bashrc
if [ -f /usr/bin/alacritty ]; then
  export TERMINAL=/usr/bin/alacritty
  export LC_ALL=pt_BR.UTF-8
fi
#+end_src

*** Custom files, functions and configs
Run some custom stuff
#+begin_src shell :tangle ~/.bashrc
if [ -d $HOME/.bashrc.d ]; then
  for f in "$HOME"/.bashrc.d/*
  do
    source $f
  done
fi
[ -f "$HOME"/.shrc ] && source "$HOME"/.shrc
#+end_src

Aliases
#+begin_src shell :tangle ~/.bashrc
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi
#+end_src

Adicionar JBang no ambiente
#+begin_src shell :tangle ~/.bashrc
if [ -f $HOME/.jbang/bin/jbang ]; then
  alias j!=jbang
  export PATH="$HOME/.jbang/bin:$HOME/.jbang/currentjdk/bin:$PATH"
  export JAVA_HOME=$HOME/.jbang/currentjdk
fi
#+end_src

Adicionar nvm no ambiente
#+begin_src shell :tangle ~/.bashrc
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#+end_src

Adicionar rust no ambiente
#+begin_src shell :tangle ~/.bashrc
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"
#+end_src

* Aliases
Definições de alias. Tentar manter simples. Qualquer definição controversa deve ser testada.
** Basic
#+begin_src shell :tangle ~/.aliases :shebang "#!/bin/sh"
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias lsd="ls -alF | grep /$"
alias lcd=changeDirectory

function changeDirectory {
  cd $1 ; ls -la
}
#+end_src

Pass options to free ##
#+begin_src shell :tangle ~/.aliases
alias meminfo='free -m -l -t'
#+end_src

get top process eating memory
#+begin_src shell :tangle ~/.aliases
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
#+end_src

get top process eating cpu ##
#+begin_src shell :tangle ~/.aliases
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
#+end_src

Get server cpu info ##
#+begin_src shell :tangle ~/.aliases
alias cpuinfo='lscpu'
#+end_src

get GPU ram on desktop / laptop##
#+begin_src shell :tangle ~/.aliases
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
#+end_src


This is GOLD for finding out what is taking so much space on your drives!
#+begin_src shell :tangle ~/.aliases
alias diskspace="du -S | sort -n -r |more"
#+end_src

Docker
#+begin_src shell :tangle ~/.aliases
alias dockrrmi='docker images | grep '\''<none>'\'' | grep -P '\''[1234567890abcdef]{12}'\'' -o | xargs -L1 docker rmi'
alias dockrrm='docker ps -a | grep -v '\''CONTAINER\|_config\|_data\|_run'\'' | cut -c-12 | xargs docker rm'
alias dockerm='docker rm -v $(docker ps -a -q -f status=exited)'
alias dockermi='docker rmi $(docker images -f "dangling=true" -q)'
alias dockermv='docker volume rm $(docker volume ls -qf dangling=true)'
#+end_src


Add an "alert" alias for long running commands.  Use like so:
>  sleep 10; alert
#+begin_src shell :tangle ~/.aliases
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
#+end_src

# temporario, melhorar isso!!!
#+begin_src shell :tangle ~/.aliases
alias eclipse='eclipse --launcher.ini $HOME/.config/eclipse/eclipse.ini'
#+end_src

#+begin_src shell :tangle ~/.aliases
alias config='/usr/bin/git --git-dir=$HOME/repos/dotfiles/ --work-tree=$HOME'
#+end_src


Alguns alias para serem revistos:

alias vin='nvim'
alias intellij=intellij-idea-community
alias apt-installed="comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)"

alias restmux='[[ -z "$TMUX" ]] && exec tmux new-session -A -s $USER'

alias scan='sudo freshclam && sudo clamscan -roi --exclude-dir="^/sys" '

alias show-dependencies='pacman -Qe | cut -d" " -f 1 | while read in; do pactree -r "$in"; done'
** TODO


git init --bare $HOME/.cfg
alias config='/usr/bin/git --git-dir=$HOME/repos/dotfiles/ --work-tree=$HOME'
config config --local status.showUntrackedFiles no
echo "alias config='/usr/bin/git --git-dir=$HOME/repos/dotfiles/ --work-tree=$HOME'" >> $HOME/.bashrc


*** A configuração do neovim precisa de um bootstrap do Packer. Ver https://dev.to/oinak/neovim-config-from-scratch-part-i-3o2m .
#+begin_src shell
git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
#+end_src

Depois disso, abrir o .config/nvim/init.lua no nvim, :so % e :PackerSync
