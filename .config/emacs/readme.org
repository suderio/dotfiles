#+title: Suderio's GNU Emacs Config
#+AUTHOR: Paulo Suderio
#+DESCRIPTION: Suderio's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-things-to-do-first][IMPORTANT THINGS TO DO FIRST]]
  - [[#what-should-be-installed-in-your-os][What should be installed in your OS]]
  - [[#non-versioned-local-files][Non-versioned, local files]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#loading-elpaca][Loading Elpaca]]
  - [[#no-littering][No littering]]
  - [[#backup][Backup]]
  - [[#loading-the-scripts][Loading the scripts]]
  - [[#sane-defaults][Sane defaults]]
  - [[#minibuffercompletion][Minibuffer/completion]]
  - [[#interface-enhancementsdefaults][Interface enhancements/defaults]]
  - [[#tab-bar][Tab-bar]]

* IMPORTANT THINGS TO DO FIRST
These are the bare minimum.

This configuration was heavily influenced by:
- https://github.com/iocanel/emacs.d
- https://gitlab.com/dwt1/dashboard-set-file-icons
- https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/init.el
- https://github.com/pprevos/emacs-writing-studio

With some ideas stealed from:
- https://protesilaos.com/emacs/dotemacs
- https://github.com/purcell/emacs.d
- https://whhone.com/emacs-config/

These are excelent resources to learn more:
- https://codeberg.org/ashton314/emacs-bedrock
- https://sr.ht/~ashton314/emacs-bedrock/
- https://github.com/thinkhuman/writingwithemacs
- https://github.com/pprevos/emacs-writing-studio
- https://www.masteringemacs.org/
- https://github.com/progfolio/.emacs.d
- https://orgmode.org/worg/org-tutorials/
- https://list.orgmode.org/orgmode/20071221.230243.10858071.dto@pod.lab/
- https://orgmode.org/manual/index.html
- https://lucidmanager.org/productivity/configure-emacs/
- https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html
- https://sachachua.com/blog/2007/12/emacs-getting-things-done-with-org-basic/
- https://cachestocaches.com/2020/3/org-mode-annotated-bibliography/
- https://www.bowmanjd.com/dotfiles/dotfiles-2-bare-repo/
** What should be installed in your OS
We must install a bunch of os packages in order to everything work:
#+begin_src emacs-lisp

(when (< emacs-major-version 29)
  (error (format "Evilmacs only works with Emacs 29 and newer; you have version ~a" emacs-major-version)))

(defun em/check-os-deps (dep)
  "Checks and reports missing dependencies"
  (unless (executable-find dep) (message "%s is not installed, some packages may not work" dep))
)
(em/check-os-deps "cmake")
(em/check-os-deps "mpv")
(em/check-os-deps "sxiv")
(em/check-os-deps "unzip")
(em/check-os-deps "pdflatex")
(em/check-os-deps "jq")
#+end_src
** Non-versioned, local files
Everything temporary should go in the .local directory.
#+begin_src emacs-lisp
;; (defvar em/local-dir (expand-file-name ".local/" user-emacs-directory) "Local state directory")
(setq no-littering-etc-directory (expand-file-name "config/" user-emacs-directory)
      no-littering-var-directory (expand-file-name "data/" user-emacs-directory)
      scripts-directory (expand-file-name "scripts/" user-emacs-directory))
#+end_src
** Adding the scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src
** Loading Elpaca
#+begin_src emacs-lisp
(org-babel-tangle-file (expand-file-name "elpaca.org" scripts-directory)) 

(load "elpaca")  ;; Elpaca Configurations
#+end_src

** No littering
#+begin_src emacs-lisp
(use-package no-littering
   :ensure t)
;; Emacs will save customizations into your init.el file by default. Instead, save in the "etc" directory:
(setq custom-file (expand-file-name "custom.el" no-littering-etc-directory))
#+end_src
** Backup 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src
** Loading the scripts
#+begin_src emacs-lisp
(dolist (script '(
  "org"
  "basic"
  "window"
  "gui"
  "evil"
  "dev"
  "other"
  "custom"
  ))
  (org-babel-tangle-file (expand-file-name (concat script ".org") scripts-directory))
  (load script)
)
#+end_src

** Sane defaults
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp 
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(setopt auto-revert-avoid-polling t) ;; Automatically reread from disk if the underlying file changes
(setopt auto-revert-interval 5)      ;; Some systems don't do file notifications well; see 
(setopt auto-revert-check-vc-info t) ;; https://todo.sr.ht/~ashton314/emacs-bedrock/11
(global-auto-revert-mode t)          ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(setq display-line-numbers-type 'relative)         ; Show relative line
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq use-file-dialog nil)   ;; No file dialog
(setq use-dialog-box nil)    ;; No dialog box
(setq pop-up-windows nil)    ;; No popup windows
(setq vc-follow-symlinks t)  ;; When editing a symlink pointing to version control, edit the file without asking
(setq inhibit-compacting-font-caches t) ;; Donâ€™t compact font caches during GC.
(setq find-file-visit-truename t) ;; To avoid ridiculous path displayed on the mode-line while visiting a symbolink

(savehist-mode) ;; Save history of minibuffer

;; Move through windows with Ctrl-<arrow keys>
(windmove-default-keybindings 'control) ; You can use other modifiers here

;; Fix archaic defaults
(setopt sentence-end-double-space nil)

;; Make right-click do something sensible
(when (display-graphic-p)
  (context-menu-mode))

;; Short answers only please
(setq use-short-answers t)
#+end_src

** Minibuffer/completion
For help, see: https://www.masteringemacs.org/article/understanding-minibuffer-completion
#+begin_src emacs-lisp
(setopt enable-recursive-minibuffers t)                ; Use the minibuffer whilst in the minibuffer
(setopt completion-cycle-threshold 1)                  ; TAB cycles candidates
(setopt completions-detailed t)                        ; Show annotations
(setopt tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent
(setopt completion-styles '(basic initials substring)) ; Different styles to match input to candidates

(setopt completion-auto-help 'always)                  ; Open completion always; `lazy' another option
(setopt completions-max-height 20)                     ; This is arbitrary
(setopt completions-detailed t)
(setopt completions-format 'one-column)
(setopt completions-group t)
(setopt completion-auto-select 'second-tab)            ; Much more eager
;(setopt completion-auto-select t)                     ; See `C-h v completion-auto-select' for more possible values

(keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+end_src

** Interface enhancements/defaults

#+begin_src emacs-lisp
;; Mode line information
(setopt line-number-mode t)                        ; Show current line in modeline
(setopt column-number-mode t)                      ; Show column as well

(setopt x-underline-at-descent-line nil)           ; Prettier underlines
(setopt switch-to-buffer-obey-display-actions t)   ; Make switching buffers more consistent

(setopt show-trailing-whitespace nil)      ; By default, don't underline trailing spaces
(setopt indicate-buffer-boundaries 'left)  ; Show buffer top and bottom in the margin

;; Enable horizontal scrolling
(setopt mouse-wheel-tilt-scroll t)
(setopt mouse-wheel-flip-direction t)

;; We won't set these, but they're good to know about
;;
;; (setopt indent-tabs-mode nil)
;; (setopt tab-width 4)

;; Misc. UI tweaks
(blink-cursor-mode -1)                                ; Steady cursor
(pixel-scroll-precision-mode)                         ; Smooth scrolling

;; Use common keystrokes by default
;(cua-mode)

;; Display line numbers in programming mode
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(setopt display-line-numbers-width 3)           ; Set a minimum width

;; Nice line wrapping when working with text
(add-hook 'text-mode-hook 'visual-line-mode)

;; Modes to highlight the current line with
(let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
  (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+end_src

** Tab-bar
#+begin_src emacs-lisp
;; Show the tab-bar as soon as tab-bar functions are invoked
(setopt tab-bar-show 1)

;; Add the time to the tab-bar, if visible
(add-to-list 'tab-bar-format 'tab-bar-format-align-right 'append)
(add-to-list 'tab-bar-format 'tab-bar-format-global 'append)
(setopt display-time-format "%a %F %T")
(setopt display-time-interval 1)
(display-time-mode)
#+end_src

