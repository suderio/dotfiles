#+title: Suderio's GNU Emacs Config
#+AUTHOR: Paulo Suderio
#+DESCRIPTION: Suderio's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args    :tangle yes
* Development Configuration :toc:
- [[#ediff][Ediff]]
- [[#git-programs][Git Programs]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#language-support][Language Support]]
- [[#treesitter][Treesitter]]
- [[#eglot][Eglot]]
- [[#documentation][Documentation]]
- [[#agressively-indent][Agressively Indent]]
- [[#languages][Languages]]
  - [[#bash][Bash]]
  - [[#java][Java]]
  - [[#kotlin][Kotlin]]
  - [[#rust][Rust]]
- [[#completion][Completion]]
- [[#compilation][Compilation]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#rest][Rest]]
- [[#logview][Logview]]

* Ediff
'ediff' is a diff program that is built into Emacs.  By default, 'ediff' splits files vertically and places the 'help' frame in its own window.  I have changed this so the two files are split horizontally and the 'help' frame appears as a lower split within the existing window.  Also, I create my own 'dt-ediff-hook' where I add 'j/k' for moving to next/prev diffs.  By default, this is set to 'n/p'.

#+begin_src emacs-lisp :tangle yes
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun dt-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'dt-ediff-hook)
#+end_src 
* Git Programs
** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.


#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package transient)

(use-package magit
  :defer t
  :after (transient))
#+end_src
* Language Support
#+begin_src emacs-lisp :tangle yes
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src
* Treesitter
#+begin_src emacs-lisp :tangle yes
(setq major-mode-remap-alist
      '((yaml-mode . yaml-ts-mode)
        (bash-mode . bash-ts-mode)
        (js2-mode . js-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (json-mode . json-ts-mode)
        (css-mode . css-ts-mode)
        (python-mode . python-ts-mode)
        (java-mode . java-ts-mode)
        (kotlin-mode . kotlin-ts-mode)
        (rust-mode . rust-ts-mode)
))
#+end_src

* Eglot
https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc
From Doom Emacs:
Defer server shutdown for a few seconds.
This gives the user a chance to open other project files before the server is
auto-killed (which is a potentially expensive process). It also prevents the
server getting expensively restarted when reverting buffers.

Slightly edited from Doom Emacs as I don't use it's '+lsp-optmizations-mode`."
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :demand t
  :hook (prog-mode . eglot-ensure)
  :custom
  (eglot-sync-connect 1)
  (eglot-connect-timeout 10)
  (eglot-autoshutdown t)
  (eglot-send-changes-idle-time 0.5))

#+end_src
* Documentation
#+begin_src emacs-lisp
(use-package eldoc
  :init
  (global-eldoc-mode))
#+end_src
* Agressively Indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+end_src
* Languages
** Bash
#+begin_src emacs-lisp
(setq sh-basic-offset 2
      sh-indentation 2)

#+end_src
** Java
#+begin_src emacs-lisp
(use-package eglot-java)
(add-hook 'java-mode-hook 'eglot-java-mode)
(add-hook 'java-ts-mode-hook 'eglot-java-mode)

#+end_src
** Kotlin
#+begin_src emacs-lisp
(use-package kotlin-ts-mode)
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t))
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :commands (global-company-mode)
    :init
    (global-company-mode)
    :custom
    (company-tooltip-align-annotations 't)
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1))
#+end_src
* Compilation
#+begin_src emacs-lisp
(use-package ansi-color
  :ensure nil
  :hook (compilation-filter . ansi-color-compilation-filter))

#+end_src
* Rainbow Mode
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* Rest

#+begin_src emacs-lisp :tangle yes
(use-package restclient)

(use-package restclient-jq
  :after restclient)


(use-package jq-mode
  :after restclient-jq)
#+end_src
* Logview
#+begin_src emacs-lisp
(use-package logview)

#+end_src
