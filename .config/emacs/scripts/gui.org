#+title: Suderio's GNU Emacs Config - GUI
#+AUTHOR: Paulo Suderio
#+DESCRIPTION: Suderio's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args    :tangle yes

* GUI :toc:
  - [[#all-the-icons][All The Icons]]
  - [[#bell][Bell]]
  - [[#dashboard][Dashboard]]
  - [[#diminish][Diminish]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
  - [[#modeline][Modeline]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#theme][Theme]]
  - [[#transparency][Transparency]]

** All The Icons

This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :diminish
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Bell
Disables anoying bell
#+begin_src emacs-lisp :tangle yes
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+end_src

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; (setq dashboard-banner-logo-title "Emacs The Ultimate!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "~/.config/emacs/images/emacs-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 15)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 3)
                          (registers . 3)))
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp :tangle yes
(use-package diminish)

#+end_src
** Setting the Font Face
Defining the various fonts that Emacs will use.
#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil
  :font "Noto Sans Mono"
  :height 80
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "DejaVu Serif"
  :height 90
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Noto Sans Mono"
  :height 80
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "Noto Sans Mono-8"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.02)

#+end_src
** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Modeline
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp :tangle yes
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35                                                        ;; sets modeline height
        doom-modeline-bar-width 5                                                      ;; sets right bar width
        doom-modeline-persp-name t                                                     ;; adds perspective name to modeline
        doom-modeline-persp-icon t                                                     ;; adds folder icon next to persp name
        doom-modeline-minor-modes t                                                    ;; shows minor modes
        doom-modeline-enable-word-count t                                              ;; counts how many words
        doom-modeline-continuous-word-count-modes '(markdown-mode org-mode latex-mode) ;; in which modes
        doom-modeline-total-line-number t))  
#+end_src
** Rainbow Delimiters
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+end_src
** Theme
The first line below designates the directory where will place all of our custom-made themes, which I have created only one (dtmacs).  You can create your own Emacs themes with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].  I am also installing =doom-themes= because it contains a huge collection of themes.  M-x load-theme will list all of the themes available.

#+begin_src emacs-lisp :tangle yes
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Sets the default theme to load!!! 
  (load-theme 'doom-acario-dark t)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
** Transparency
With Emacs version 29, true transparency has been added.  If you want some slight transparency, try setting alpha to '90'.  Of course, if you set alpha to '0', the background of Emacs would completely transparent.

#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(alpha-background . 85)) ; For all new frames henceforth

#+end_src
