#+title: Suderio's GNU Emacs Config - Org
#+AUTHOR: Paulo Suderio
#+DESCRIPTION: Suderio's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args    :tangle yes

* ORG MODE :toc:
  - [[#some-critical-variables][Some Critical variables]]
  - [[#ui-tweaks][UI Tweaks]]
  - [[#highlight-todo][Highlight TODO]]
  - [[#org][Org]]
  - [[#org-attach][Org-attach]]
  - [[#org-roam][Org-roam]]
  - [[#auto-tangle][Auto Tangle]]
  - [[#org-level-headers][Org Level Headers]]
  - [[#org-tempo][Org-Tempo]]
  - [[#org-git-sync][Org-git-sync]]
  - [[#toc-org][Toc-Org]]
  - [[#citations][Citations]]
  - [[#latex-pdf-export-configuration][Latex PDF Export configuration]]
  - [[#latex-generation-to-abnt][Latex generation to ABNT]]
  - [[#latex-preview][Latex Preview]]
  - [[#pdfs][PDFs]]
  - [[#epub-export][Epub export]]

** Some Critical variables
#+begin_src emacs-lisp :tangle yes
;; Agenda variables
(setq org-directory "~/Org/") ; Non-absolute paths for agenda and
                                        ; capture templates will look here.

(setq org-agenda-files '("inbox.org" "work.org"))

;; Default tags
(setq org-tag-alist '(
                      ;; locale
                      (:startgroup)
                      ("home" . ?h)
                      ("work" . ?w)
                      ("school" . ?s)
                      (:endgroup)
                      (:newline)
                      ;; scale
                      (:startgroup)
                      ("one-shot" . ?o)
                      ("project" . ?j)
                      ("throwaway" . ?t)
                      (:endgroup)
                      ;; misc
                      ("writing")
                      ("review")
                      ("reading")))

;; Org-refile: where should org-refile look?
(setq org-refile-targets 'FIXME)

;;; Phase 3 variables

;; Org-roam variables
(setq org-roam-directory "~/Org/org-roam/")
(setq org-roam-index-file "~/Org/org-roam/index.org")
;;; Optional variables

;; Advanced: Custom link types
;; This example is for linking a person's 7-character ID to their page on the
;; free genealogy website Family Search.
(setq org-link-abbrev-alist
      '(("family_search" . "https://www.familysearch.org/tree/person/details/%s")))
#+end_src
** UI Tweaks
#+begin_src emacs-lisp
(setq-default org-startup-indented t
              org-pretty-entities t
              org-use-sub-superscripts "{}"
              org-hide-emphasis-markers t
              org-startup-with-inline-images t
              org-image-actual-width '(300))

(use-package org-appear
  :hook
  (org-mode . org-appear-mode))

(use-package org-modern
  :hook
  (org-mode . global-org-modern-mode)
  :custom
  (org-modern-keyword nil)
  (org-modern-checkbox nil)
  (org-modern-table nil))

					; LaTeX previews
(use-package org-fragtog
  :after org
  :custom
  (org-startup-with-latex-preview t)
  :hook
  (org-mode . org-fragtog-mode)
  :custom
  (org-format-latex-options
   (plist-put org-format-latex-options :scale 2)
   (plist-put org-format-latex-options :foreground 'auto)
   (plist-put org-format-latex-options :background 'auto)))
#+end_src
** Highlight TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("WAITING"      error bold)
          ("DOING"       font-lock-constant-face bold)
          ("DONE"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("CANCELLED" font-lock-doc-face bold))))

#+end_src
** Org
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-export-backends 'md)

;; Make org-open-at-point follow file links in the same window
(setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

;; Make exporting quotes better
(setq org-export-with-smart-quotes t
      org-export-with-drawers nil
      org-export-with-todo-keywords nil
      org-export-with-broken-links t
      org-export-with-toc nil
      org-export-date-timestamp-format "%d %B %Y")
;; Export ODT to MS-Word
(setq-default org-odt-preferred-output-format "docx")
;; Export ODT to PDF
;; (setq-default org-odt-preferred-output-format "pdf")

(setq org-log-done 'time)
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "DOING" "|" "DONE(!)" "CANCELLED(!)")))
;; Refile configuration
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)
(setq org-capture-templates
      '(("c" "Default Capture" entry (file "inbox.org")
         "* TODO %?\n%U\n%i")
        ;; Capture and keep an org-link to the thing we're currently working with
        ("r" "Capture with Reference" entry (file "inbox.org")
         "* TODO %?\n%U\n%i\n%a")
        ;; Define a section
        ("w" "Work")
        ("wm" "Work meeting" entry (file+headline "work.org" "Meetings")
         "** TODO %?\n%U\n%i\n%a")
        ("wt" "Work task" entry (file+headline "work.org" "Tasks")
         "** TODO %c\n%U\n[[http://itsmweb.bndes.net/servlet/ViewFormServlet?form=HPD%3AHelp+Desk&server=itsm.bndes.net&eid=%c][remedy]]\n%?")
        ("wi" "Work incident" entry (file+headline "work.org" "Incidents")
         "** TODO %c\n%U\n[[http://itsmweb.bndes.net/servlet/ViewFormServlet?form=HPD%3AHelp+Desk&server=itsm.bndes.net&eid=%c][remedy]]\n%?")
        ("wa" "Work adhoc" entry (file+headline "work.org" "Ad hoc")
         "** TODO %?\n%U\n%i\n%a")
        ("wr" "Work report" entry (file+headline "work.org" "Reports")
         "** TODO %?\n%U\n%i\n%a")))


(setq org-agenda-custom-commands
      '(("n" "Agenda and All Todos"
         ((agenda)
          (todo)))
        ("w" "Work" agenda ""
         ((org-agenda-files '("work.org"))))))
#+end_src
** TODO Org-attach
#+begin_src emacs-lisp
(setq org-attach-directory "~/Org/attach/")
 (use-package org-attach-git
  :ensure nil)
#+end_src
** Org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :config
  (org-roam-db-autosync-mode)
  ;; Dedicated side window for backlinks
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (window-width . 0.4)
                 (window-height . fit-window-to-buffer))))

;; Pretty web interface for org-roam
(use-package org-roam-ui
  :ensure t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
** Auto Tangle
This is a very handy plugin to auto-tangle every org file.
All you need to do is addd `#+auto_tangle: t` in the header of the org file.
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :diminish
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))

#+end_src
** Org Level Headers
#+begin_src emacs-lisp :tangle yes
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src
** Org-Tempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp :tangle yes 
(require 'org-tempo)
#+end_src
** Org-git-sync
#+begin_src emacs-lisp
;(use-package org-git-sync
;  :ensure nil)
#+end_src
** Toc-Org
Allows us to create a Table of Contents in our Org docs.

#+begin_src emacs-lisp :tangle yes
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Citations
Citations configuration, using Citar.
See:
- https://kristofferbalintona.me/posts/202206141852/
- https://blog.tecosaur.com/tmio/2021-07-31-citations.html
#+begin_src emacs-lisp
(use-package citar
  :custom
  (citar-bibliography '("~/Org/global.bib"))
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup))

(use-package citar-embark
  :after citar embark
  :diminish
  :no-require
  :config (citar-embark-mode))

(setq citar-templates '(
			(main . "${author editor:30%sn}     ${date year issued:4}     ${title:48}")
			(suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords keywords:*}")
			(preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.")
			(note . "Notes on ${author editor:%etal}, ${title}")))
#+end_src
** Latex PDF Export configuration
#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure nil
    :demand t
    :custom
    ;; Multiple LaTeX passes for bibliographies
    (org-latex-pdf-process
     '("pdflatex -interaction nonstopmode -output-directory %o %f"
       "bibtex %b"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    ;; Clean temporary files after export
    (org-latex-logfiles-extensions
     (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out"
             "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk"
             "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
             "tex" "bcf"))))


#+end_src
** Latex generation to ABNT
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("abntex2"
"[NO-DEFAULT-PACKAGES]
\\documentclass{abntex2}
\\usepackage{lmodern}	
\\usepackage[T1]{fontenc}
\\usepackage[utf8]{inputenc}
\\usepackage{indentfirst}
\\usepackage{nomencl}
\\usepackage{color}
\\usepackage{graphicx}
\\usepackage{microtype}
\\usepackage[brazilian,hyperpageref]{backref}
\\usepackage[alf]{abntex2cite}
\\usepackage{fourier}
[EXTRA]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")
("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 )))

(setq org-latex-hyperref-template 
"\\hypersetup{
 pdftitle={%t}, 
 pdfauthor={%a},
 pdfsubject={%d},
 pdfcreator={%c},
 pdfkeywords={%k},
 pdflang={%L},
 colorlinks=true,
 linkcolor=blue,
 citecolor=blue,
 filecolor=magenta,
 urlcolor=blue,
 bookmarksdepth=4}
")
#+end_src

** Latex Preview
#+begin_src emacs-lisp :tangle yes
(use-package latex-preview-pane
  :defer t
  :commands  (latex-preview-pane-mode)
  :hook ((latex-mode . latex-preview-pane-mode)))
#+end_src
** PDFs
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can be used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+begin_src emacs-lisp :tangle yes
(use-package pdf-tools
  :defer t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf"))

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
                                                         (blink-cursor-mode -1)
                                                         (doom-modeline-mode -1)))
#+end_src
** Epub export
#+begin_src emacs-lisp
  (use-package ox-epub
    :demand t)

#+end_src
