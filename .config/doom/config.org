* Emacs config
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!
** Functions

*** Check if font is installed
#+begin_src emacs-lisp
(defun font-installed? (font-name)
  "Retorna t se a fonte font-name est√° instalada"
  (if (find-font (font-spec :name font-name))
      t nil))
#+end_src

** Basic config
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp
(setq user-full-name "Paulo Suderio"
       user-mail-address "paulo.suderio@gmail.com")
#+end_src
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** UI
A better theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
#+end_src

Change GUI Logo
#+begin_src emacs-lisp
(setq fancy-splash-image (file-name-concat doom-user-dir "emacs-logo.png"))
#+end_src
Change to FiraCode if available
#+begin_src emacs-lisp
(if (and (font-installed? "FiraCode Nerd Font") (font-installed? "FiraCode Nerd Font Mono"))
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font Mono" :size 13)))
#+end_src
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/Org/")
#+end_src
** Magit
Obs.: diff-refine-hunk may be slow
#+begin_src emacs-lisp
(after! magit
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))
(after! magit
  (setq magit-diff-refine-hunk 'all))
#+end_src

** Just
#+begin_src emacs-lisp
(use-package! justl
  :config
  (map! :n "e" 'justl-exec-recipe))
#+end_src

** TODO biblio config
 (setq org-cite-csl-styles-dir "~/Zotero/styles")
 (setq! citar-bibliography '("/path/to/references.bib"))
 (setq! citar-library-paths '("/path/to/library/files/")
       citar-notes-paths '("/path/to/your/notes/"))
** TODO see lsp-mode configuration (https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/)
** TODO configurar latex
 (setq reftex-default-bibliography "/your/bib/file.bib")



** Remember
Doom exposes five (optional) variables for controlling fonts in Doom:
 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
 - `doom-symbol-font' -- for symbols
 - `doom-serif-font' -- for the `fixed-pitch-serif' face
See 'C-h v doom-font' for documentation and more examples of what they accept. For example:


Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.
