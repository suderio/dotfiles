#!/usr/bin/env just --justfile

# Lista de linguagens/pacotes desejados
OS_PACKAGES := "cmake mpv sxiv jq zip unzip git less curl wget shellcheck file gnupg openssh base-devel xdg-user-dirs xdg-utils "
RUST_PACKAGES := "bat eza ripgrep git-delta bvaisvil/zenith.git du-dust tree-sitter-cli viu fd-find procs zellij ast-grep"
PYTHON_PACKAGES := "isort pipenv nose nose2 pytest pylatexenc "
RUBY_PACKAGES := "chef-utils concurrent kramdown kramdown-parser-gfm mixlib-cli mixlib-config mixlib-shellout rexml ruby-tomlrb neovim"
GO_PACKAGES := "github.com/jesseduffield/lazygit@latest github.com/fatih/gomodifytags@latest github.com/cweill/gotests/gotests@latest github.com/x-motemen/gore/cmd/gore@latest golang.org/x/tools/gopls@latest"
PACKAGES_UNINSTALL := "markdownlint ruby-mixlib-shellout ruby-chef-utils ruby-concurrent ruby-kramdown-parser-gfm ruby-kramdown ruby-mixlib-cli ruby-mixlib-config ruby-rexml ruby-tomlrb lazygit npm bash-language-server node-gyp nodejs-nopt prettier semver stylelint nodejs bat eza ripgrep git-delta zenith dust tree-sitter-cli viu fd procs rustup ruby composer jdk-openjdk kotlin ktlint cpanminus julia gopls python-pipx"
NPM_PACKAGES := "prettier bash-language-server node-gyp semver stylelint neovim @mermaid-js/mermaid-cli js-beautify markdownlint"
PERL_PACKAGES := "Neovim::Ext"
OTHER_PACKAGES := "neovim pynvim setuptools texlive texlive-langenglish texlive-langportuguese pandoc lynis clamav emacs-wayland github-cli ctop zathura zathura-djvu zathura-ps zathura-cb xdotool luarocks lua51 php kitty ghostty imagemagick sbcl"
DUNO := "xclip aria2 aspell biber direnv fzf fzy git-lfs gnuplot htop nnn ncdu pass sshfs chafa ueberzugpp zig markdownlint zshdb shfmt tidy stylelint zls bashdb"
FONTS := "FiraCode DejaVuSansMono JetBrainsMono SourceCodePro Hack NerdFontsSymbolsOnly"

NERD_FONTS_URL := "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/"
NVM_INSTALL_URL := "https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh"
KTLINT_INSTALL_URL := "https://github.com/pinterest/ktlint/releases/download/1.5.0/ktlint"
alias ios := install-os-packages
alias igo := install-go-packages
alias inpm := install-npm-packages
alias irust := install-rust-packages
alias ipython := install-python-packages
alias iperl := install-perl-packages
alias igem := install-gem-packages
alias ifonts := install-fonts
alias hard := hardening
alias clean := cleanup

# Task principal - instala todos os pacotes
install:
  #!/usr/bin/env bash
  cat <<- END
    As tarefas que estão prontas para serem executadas são as que têm alias.
    As demais funcionam, mas estão faltando alguma parte ou têm alguma interatividade.
  END

# Hardening usando lynis
hardening:
  #!/usr/bin/env bash
  # Understand and configure core dumps on Linux - https://linux-audit.com/software/understand-and-configure-core-dumps-work-on-linux/#disable-core-dumps
  echo 'ulimit -c 0' | sudo tee /etc/profile.d/disable-coredumps.sh >/dev/null
  sudo chown root:root /etc/profile.d/disable-coredumps.sh
  sudo chmod 0644 /etc/profile.d/disable-coredumps.sh
  # Linux password security hashing rounds - https://linux-audit.com/authentication/configure-the-minimum-password-length-on-linux-systems/
  sudo pacman --noconfirm -S libpwquality
  # Set default file permissions on Linux with umask - https://linux-audit.com/filesystems/file-permissions/set-default-file-permissions-with-umask/
  echo 'session optional pam_umask.so umask=027' | sudo tee /etc/pam.d/common-session >/dev/null
  sudo chown root:root /etc/pam.d/common-session
  sudo chmod 0644 /etc/pam.d/common-session

# Instala algumas Nerd Fonts
install-fonts:
  #!/usr/bin/env bash
  set -euxo pipefail
  for font in {{FONTS}}; do
    mkdir -p "$XDG_DATA_HOME/fonts/$font"
    curl -sL "{{NERD_FONTS_URL}}$font.tar.xz" | unxz | tar -xvf - -C "$XDG_DATA_HOME/fonts/$font"
    chmod -R "u=rwx,g=r,o=r" "$XDG_DATA_HOME/fonts/$font"
  done
  fc-cache -v

install-nvm:
  #!/usr/bin/env bash
  set -euxo pipefail
  mkdir -p "$NVM_DIR"
  [ -s "$NVM_DIR/nvm.sh" ] || bash -c 'curl -o- {{NVM_INSTALL_URL}} | bash'
  source "$NVM_DIR/nvm.sh"
  nvm install node

install-rustup:
  #!/usr/bin/env bash
  # rustup TODO rust cargo
  command -v cargo >/dev/null 2>&1 || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

install-python:
  #!/usr/bin/env bash
  cargo install --git https://github.com/astral-sh/uv uv
  uv python install

install-rbenv:
  #!/usr/bin/env bash
  # ruby rubygems
  curl -fsSL https://rbenv.org/install.sh | bash
  # TODO
  # rbenv install -l
  # rbenv install 3.4.2
  # rbenv global 3.4.2

install-composer:
  #!/usr/bin/env bash
  # composer TODO PHP
  EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

  if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
  then
      >&2 echo 'ERROR: Invalid installer checksum'
      rm composer-setup.php
      exit 1
  fi

  php composer-setup.php --quiet --install-dir="$HOME/.local/bin" --filename=composer
  RESULT=$?
  rm composer-setup.php

install-sdkman:
  #!/usr/bin/env bash
  curl -s "https://get.sdkman.io" | bash
  sdk install java
  sdk install kotlin
  curl -sSLO {{KTLINT_INSTALL_URL}} && chmod a+x ktlint && mv ktlint "$HOME/.local/bin/"

install-julia:
  curl -fsSL https://install.julialang.org | sh

install-cpan:
  #!/usr/bin/env bash
  cpan
  wget -O- http://cpanmin.us | perl - -l ~/perl5 App::cpanminus local::lib

install-starship:
  curl -sS https://starship.rs/install.sh | sh -s -- --bin-dir="$HOME/.local/bin"


# Instala pacotes do SO
install-os-packages:
  @just _check-os-and-install "{{OS_PACKAGES}}"

# Instala pacotes gem (o único necessário até agora é o neovim)
install-gem-packages:
  #!/usr/bin/env bash
  for pkg in {{RUBY_PACKAGES}}; do
    gem install "$pkg"
  done

# Instala pacotes Perl
install-perl-packages:
  #!/usr/bin/env bash
  for pkg in {{PERL_PACKAGES}}; do
    cpanm "$pkg"
  done

# Instala pacotes Rust
install-rust-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{RUST_PACKAGES}}; do
    case "$pkg" in 
      *.git) cargo install --git "http://github.com/$pkg"
      ;;
 
      ripgrep) cargo install --features 'pcre2' "$pkg"
      ;;

      *) cargo install "$pkg"
      ;;
    esac
  done     

# Instala pacotes Go
install-go-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{GO_PACKAGES}}; do
    go install "$pkg"
  done

# Instala pacotes npm
install-npm-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{NPM_PACKAGES}}; do
    npm install --global "$pkg"
  done

# Instala pacotes python
install-python-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{PYTHON_PACKAGES}}; do
    uv tool install "$pkg"
  done

# Limpa o que tinha sido instalado anteriormente
cleanup:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{PACKAGES_UNINSTALL}}; do
    if pacman -Qq "$pkg" >/dev/null 2>&1; then
      case "$pkg" in
        ruby) sudo pacman --noconfirm -R ruby rubygems
        ;;

        *) sudo pacman --noconfirm -R "$pkg"
        ;;
      esac
    fi
  done

# Detecta o sistema operacional e chama a task de instalação correta
_check-os-and-install pkgs:
    #!/usr/bin/env bash
    set -euxo pipefail
    os=$(uname -s)
    if [ "$os" != "Linux" ]; then
      echo "⚠️ Sistema operacional '$os' ainda não implementado."
      exit 1
    fi

    if [ -f /etc/os-release ]; then
      . /etc/os-release
      distro=$ID
    else
      echo "⚠️ Não foi possível detectar a distribuição Linux."
      exit 1
    fi

    case "$distro" in
      arch|manjaro|garuda)
        just _install-if-missing "{{pkgs}}"
        ;;
      *)
        echo "⚠️ Distribuição '$distro' ainda não implementada."
        exit 1
        ;;
    esac

# Instala pacotes ausentes, usando pacman ou AUR
_install-if-missing pkgs:
    #!/usr/bin/env bash
    set -euxo pipefail
    missing=()
    for pkg in {{pkgs}}; do
      if ! pacman -Qi "$pkg" &>/dev/null; then
        missing+=("$pkg")
      fi
    done

    if [ "${#missing[@]}" -eq 0 ]; then
      echo "✅ Todos os pacotes já estão instalados."
      exit 0
    fi

    echo "📦 Instalando pacotes ausentes: ${missing[*]}"
    for pkg in "${missing[@]}"; do
      echo "→ Verificando: $pkg"
      if pacman -Si "$pkg" &>/dev/null; then
        echo "  → Instalando com pacman"
        sudo pacman -S --noconfirm --needed "$pkg"
      elif command -v paru &>/dev/null; then
        echo "  → Instalando com paru (AUR)"
        paru -S --noconfirm --needed "$pkg"
      elif command -v yay &>/dev/null; then
        echo "  → Instalando com yay (AUR)"
        yay -S --noconfirm --needed "$pkg"
      else
        echo "  ✗ Nenhum helper AUR (paru/yay) encontrado para instalar '$pkg'."
        exit 1
      fi
    done
