#!/usr/bin/env just --justfile

# Lista de linguagens/pacotes desejados
OS_PACKAGES := "cmake mpv sxiv jq zip unzip git less curl wget shellcheck file gnupg openssh base-devel xdg-user-dirs xdg-utils"
RUST_PACKAGES := "bat eza ripgrep git-delta bvaisvil/zenith.git du-dust tree-sitter-cli viu fd-find"
PYTHON_PACKAGES := ""
GO_PACKAGES := "github.com/jesseduffield/lazygit@latest"
PACKAGES_UNINSTALL := "lazygit nodejs npm bash-language-server node-gyp nodejs-nopt prettier semver stylelint"
NPM_PACKAGES := "prettier bash-language-server node-gyp prettier semver stylelint"
OTHER_PACKAGES := "neovim texlive texlive-langenglish texlive-langportuguese pandoc lynis clamav emacs-wayland github-cli ctop pipx"
DUNO := "xclip aria2 aspell biber direnv fzf fzy git-lfs gnuplot htop nnn ncdu pass sshfs chafa ueberzugpp python-pylatexenc python-pynvim"

# Task principal - instala todos os pacotes
install-packages:
    install-package-managers
    install-os-packages
    install-rust-packages
    install-go-packages

# Instala gerenciadores de pacotes
install-package-managers:
    #!/usr/bin/env bash
    set -euxo pipefail
    [ -s "$NVM_DIR/nvm.sh" ] || bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash'
    # TODO bash -c 'nvm install node'
    pipx ensurepath
    pipx completions

# Instala pacotes do SO
install-os-packages:
    @just _check-os-and-install "{{OS_PACKAGES}}"

# Instala pacotes Rust
install-rust-packages:
    #!/usr/bin/env bash
    set -euxo pipefail
    for pkg in {{RUST_PACKAGES}}; do
      case "$pkg" in 
        *.git) cargo install --git "http://github.com/$pkg"
        ;;

        *) cargo install "$pkg"
        ;;
      esac
    done     

# Instala pacotes Go
install-go-packages:
    #!/usr/bin/env bash
    set -euxo pipefail
    for pkg in {{GO_PACKAGES}}; do
      go install "$pkg"
    done

# Instala pacotes npm
install-nvm-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{NPM_PACKAGES}}; do
    npm install --global "$pkg"
  done

# Instala pacotes python
install-python-packages:
  #!/usr/bin/env bash
  set -euxo pipefail
  for pkg in {{PYTHON_PACKAGES}}; do
    pipx install "$pkg"
  done

# Prévia dos pacotes faltantes
preview-os-packages:
    #!/usr/bin/env bash
    set -euxo pipefail
    for pkg in {{OS_PACKAGES}}; do
      if ! pacman -Qi "$pkg" &>/dev/null; then
        echo "$pkg está ausente e será instalado."
      fi
    done

# Limpa o que tinha sido instalado anteriormente
cleanup:
    #!/usr/bin/env bash
    set -euxo pipefail
    for pkg in {{RUST_PACKAGES}}; do
      if pacman -Qq "$pkg" >/dev/null 2>&1; then
        sudo pacman --noconfirm -R "$pkg"
      fi
    done

    for pkg in {{PACKAGES_UNINSTALL}}; do
      if pacman -Qq "$pkg" >/dev/null 2>&1; then
        sudo pacman --noconfirm -R "$pkg"
      fi
    done

# Detecta o sistema operacional e chama a task de instalação correta
_check-os-and-install pkgs:
    #!/usr/bin/env bash
    set -euxo pipefail
    os=$(uname -s)
    if [ "$os" != "Linux" ]; then
      echo "⚠️ Sistema operacional '$os' ainda não implementado."
      exit 1
    fi

    if [ -f /etc/os-release ]; then
      . /etc/os-release
      distro=$ID
    else
      echo "⚠️ Não foi possível detectar a distribuição Linux."
      exit 1
    fi

    case "$distro" in
      arch|manjaro|garuda)
        just _install-if-missing "{{pkgs}}"
        ;;
      *)
        echo "⚠️ Distribuição '$distro' ainda não implementada."
        exit 1
        ;;
    esac

# Instala pacotes ausentes, usando pacman ou AUR
_install-if-missing pkgs:
    #!/usr/bin/env bash
    set -euxo pipefail
    missing=()
    for pkg in {{pkgs}}; do
      if ! pacman -Qi "$pkg" &>/dev/null; then
        missing+=("$pkg")
      fi
    done

    if [ "${#missing[@]}" -eq 0 ]; then
      echo "✅ Todos os pacotes já estão instalados."
      exit 0
    fi

    echo "📦 Instalando pacotes ausentes: ${missing[*]}"
    for pkg in "${missing[@]}"; do
      echo "→ Verificando: $pkg"
      if pacman -Si "$pkg" &>/dev/null; then
        echo "  → Instalando com pacman"
        sudo pacman -S --noconfirm --needed "$pkg"
      elif command -v paru &>/dev/null; then
        echo "  → Instalando com paru (AUR)"
        paru -S --noconfirm --needed "$pkg"
      elif command -v yay &>/dev/null; then
        echo "  → Instalando com yay (AUR)"
        yay -S --noconfirm --needed "$pkg"
      else
        echo "  ✗ Nenhum helper AUR (paru/yay) encontrado para instalar '$pkg'."
        exit 1
      fi
    done
